apiVersion: apps/v1
kind: Deployment
metadata:
  name: dali-gds-jupyter
spec:
  selector:
    matchLabels:
      run: dali-gds-jupyter
  replicas: 1
  template:
    metadata:
      labels:
        run: dali-gds-jupyter
    spec:
      containers:
      - name: dali-gds-jupyter
        image:  centaurusinfra/torch-dali-jupyter:latest
        # image: cschranz/gpu-jupyter:v1.4_cuda-11.6_ubuntu-20.04_python-only
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: 0,1,2,3          
        - name: PFLOG
          value: /log/pflog    
        - name: LD_PRELOAD
          value: /lib/interpose/libpfinterpose.so          
        ports:
          - containerPort: 8888
            name: jupyter-svc  
        # command: ["sh", "-c", "sleep infinity"]
        command: ["sh", "-c", "jupyter lab --no-browser --allow-root --ip=0.0.0.0"]
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /lib/interpose/
          name: intercept       
        - mountPath: /root/scripts
          name: dali-example
        - mountPath: /root/data
          name: data
        - name: pflog
          mountPath: /log/pflog 
      volumes:
      - name: dshm  # this is to trick pytorch when large size of shared memory is needed
        emptyDir:
          medium: Memory
      - name: intercept
        hostPath:
          path: /home/steven/dev/alnair/alnair-profiler/profiler-hook-lib/build/lib
          type: Directory
      - name: dali-example
        hostPath:
          path: /home/steven/dev/DataLoaders_DALI/
          type: Directory            
      - name: codes
        hostPath:
          path: /mnt/gds
          type: Directory      
      - name: data
        hostPath:
          path: /mnt/gds-data
          type: Directory          
      - name: pflog
        hostPath:
          path: /var/lib/alnair/workspace/ 

  # restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  name: dali-gds-jupyter
spec:
  type: NodePort
  selector:
    run: dali-gds-jupyter
  ports:
  - targetPort: jupyter-svc
    port: 8888
    nodePort: 30888
  # name: tb-svc
  #   protocol: tcp
  #   targetPort: 6006
  #   port: 6006
    
